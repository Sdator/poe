untitled:Untitled-2
{
    function 复制到剪切板(s) {
        const val = s
        const inputEle = document.createElement('input')
        document.body.appendChild(inputEle)
        inputEle.setAttribute('value', val)
        inputEle.setAttribute('readonly', 'readonly')
        inputEle.select()
        document.execCommand('copy')
        document.body.removeChild(inputEle)
    }


    //鼠标点击事件
    window.addEventListener('mousedown', (e) => {
        e.stopPropagation();
        for (const { nodeValue, nodeType } of e.path[0].childNodes) {
            //  (nodeValue == null) ? console.log(1) : console.log(2)
            (nodeType == 3 && nodeValue != " ") ? 复制到剪切板(nodeValue) : null
        }
    });



    //输出测试用
    {
        const locData = JSON.parse(window.localStorage["lscache-tradedata"]);
        let i = 0;
        //用map的键值特性来过滤不值钱的货币
        for (const { text } of locData.currency) {
            //读取本地数据
            console.log(++i, text)
        }
    }


    //读取市集本地缓存数据

    const locData = JSON.parse(window.localStorage["lscache-tradedata"]);
    let i = 0, s = "";
    //用数字表达 速度快 但更新后可能位置会改变 不够精确
    //const 不值钱的 = [1, 7, 8, 10, 13, 23, 24, 25, 26, 27, 28, 29, 31, 53, 54]
    const 不值钱的 = ["Orb of Alteration", "Chromatic Orb", "Jeweller's Orb", "Orb of Chance", "Blessed Orb", "Scroll of Wisdom", "Portal Scroll", "Armourer's Scrap", "Blacksmith's Whetstone", "Glassblower's Bauble", "Orb of Transmutation", "Orb of Augmentation", "Eternal Orb", "Splinter of Tul", "Splinter of Esh"]
    const 下等货币 = ["Splinter of Uul-Netol", "Silver Coin", "Perandus Coin"]
    const 中等价值 = ["Orb of Regret", "Regal Orb", "Orb of Alchemy", "Orb of Binding", "Splinter of Xoph", "Cartographer's Chisel", "Orb of Fusing", "Orb of Scouring"]
    const 货币 = new Set();
    const 过滤后的货币 = [];

    //用map的键值特性来过滤不值钱的货币
    for (const { text } of locData.currency) {
        //读取本地数据 货币名称存进新数组中
        货币.add(text)
    }

    console.log(`所有的货币数量:${货币.size}\t不值钱的${不值钱的.length}\t下等货币${下等货币.length}\t中等价值${中等价值.length}`)
    const 排除的货币 = [...不值钱的, ...下等货币, ...中等价值]
    console.log(排除的货币, "排除货币的数量:" + 排除的货币.length)

    //算法  动态化
    //利用set的has特性判断数组中是否存在对应的值再删除
    for (const val of 排除的货币) {
        货币.has(val) ? 货币.delete(val) : null
    }

    for (const val of 货币) {
        s += `"${val}" `
    }
    console.log("值钱的货币数量", 货币.size)
    console.log(s)






    //.keys()视乎有bug会漏掉第一个没法枚举出来
    // console.dir(货币.keys())


    // 货币.delete(val)

    //算法   静态化
    //需要重新构建一个数组用前一个数组的值作为新数组的键
    //利用当前数组的键值作为新数组的键名 即索引 标记
    //货币.forEach(function (value) { 值钱的[value] = value; })
    //console.dir(货币.keys())
    //然后再读取需要删除的数组中 存放的值 作为键
    //不值钱的.forEach(function (bl) { delete 值钱的[bl]; })
    //合并数组成为字符串
    // const str = [...值钱的].join(" ")

    //遍历键名  set的键名和键值是一样的
    //console.dir(Object.keys(值钱的))







    /*
    //用数字过滤不值钱的货币
        for (const { text } of locData.currency) {
            i++
            for (const a of 不值钱的) {
                if (i == a) {
                    console.log(text)
                }
            }
        }
        console.log(不值钱的.length)
    */

    /*
         //读取本地缓存数据
         for (const { text } of locData.currency) {
            //s += `${i++}\t"${text}"\r`
            //转换到过滤器中使用
            s += `"${text}" `
        }
        console.log(不值钱的.length)
    */

    // 复制到剪切板(s)
    //window.open("").document.write(`<pre>${s}</pre>`);

}

